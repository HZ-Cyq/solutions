package com.playcrab.kos.gs.entities.activity.anniversary;

import com.alibaba.fastjson.JSONObject;
import com.alibaba.fastjson.annotation.JSONField;
import com.google.common.collect.Lists;
import com.google.common.collect.Maps;
import com.playcrab.common.bean.BeanEntry;
import com.playcrab.common.bean.ClientIgnore;
import com.playcrab.kos.common.dataconfig.ActivityAnnivesaryConfig;
import com.playcrab.kos.common.dataconfig.ActivityCommonMap;
import com.playcrab.kos.common.dataconfig.ActivityConfig;
import com.playcrab.kos.common.utils.KOSDataConfigService;
import com.playcrab.kos.common.utils.KOSTimeUtils;
import com.playcrab.kos.common.utils.RedisKeyConst;
import com.playcrab.kos.gs.activity.AutoBattle;
import com.playcrab.kos.gs.activity.timer.ActivityTimeManager;
import com.playcrab.kos.gs.entities.Diff;
import com.playcrab.kos.gs.entities.activity.ActivityBase;
import com.playcrab.kos.gs.entities.activity.ExchangeComponent;
import com.playcrab.kos.gs.entities.activity.SchoolBlock;
import com.playcrab.kos.gs.entities.player.Player;
import com.playcrab.kos.gs.enums.LbType;
import com.playcrab.kos.gs.services.activity.ActivityService;
import com.playcrab.kos.gs.services.year.ActiYearService;
import com.playcrab.kos.gs.services.year.ActivityDecoratingService;
import org.apache.commons.lang3.ArrayUtils;

import java.util.ArrayList;
import java.util.List;
import java.util.Map;

/**
 * @Description: 周年庆活动, ccommon表，判断是否可以开始挑战
 * @Author: shenpeng
 * @Date: 2020-03-25
 */
@BeanEntry
public class ActivityYear extends ActivityBase {

    /**
     * 兑换的组件
     */
    @JSONField(name = "g")
    private Map<String, ExchangeComponent> exchanges = Maps.newHashMap();

    /**
     * key：天数
     * value： 战力
     */
    @ClientIgnore
    @JSONField(serialize = false)
    private Map<String, Integer> blockCombats = Maps.newHashMap();

    /**
     * boss剩余血量
     */
    private Map<String, Long> bossHp = Maps.newHashMap();

    /**
     * 已领取的boss奖励
     */
    private List<String> gatheredKillBossId = Lists.newArrayList();

    /**
     * 当前挑战的bossId
     */
    private String curBossId;

    /**
     * 当前存在的nps
     */
    private Map<String, TaskNPC> taskNPCs = Maps.newHashMap();

    /**
     * 已经完成了任务的NPC
     */
    private List<String> finNPCs = Lists.newArrayList();

    /**
     * 今天新增的NPC
     */
    private int npcTimes;

    /**
     * 制作蛋糕，参考圣诞节的圣诞树
     */
    ChristmasTree tree;

    /**
     * npc给的buff
     */
    private List<String> buffs = Lists.newArrayList();

    //=============副本挑战================

    /**
     * 已经通过的关卡。key: mapId, value: blockId
     */
    Map<String, List<String>> finishedBlocks = Maps.newHashMap();

    /**
     * 已经领取的关卡奖励，key: mapId, value:blockId
     */
    Map<String, List<String>> gatheredRewards = Maps.newHashMap();

    /**
     * 自动战斗
     */
    private AutoBattle autoBattle;

    /**
     * 今天挑战了多少次boss
     */
    private int bossTimes;

    @ClientIgnore
    @JSONField(serialize = false)
    JSONObject enemyInfo = new JSONObject();

    @Override
    public void onDailyChange(Player pr) {
        super.onDailyChange(pr);
        dailyRefreshNPCs(pr);
        refreshExchange();
        updateBlockCombats(pr);
        diffSetBossTimes(0);
        //            tasks.reset(pr);
        //            updateCombats(pr);
        //            refreshTask(pr);
        // pr.getEventCenter().fireByEventType(pr, EventTypeDefine.FOOL_LOGIN_IN);
    }

    @Override
    public void onOpen(Player pr) {
        super.onOpen(pr);
        initTree();
        initAutoBattle();
        initTaskNPCs(pr);
        updateBlockCombats(pr);
        //        //刷新注册任务
        //        refreshTask(pr);
        //        //注册兑换商店
        refreshExchange();
        //        updateCombats(pr);
        //        pr.getEventCenter().fireByEventType(pr, EventTypeDefine.FOOL_LOGIN_IN);
    }

    @Override
    public void onEnd(Player pr) {
        super.onEnd(pr);
        taskNPCs.values().forEach(n -> n.onEnd(pr));
        // 制作蛋糕：活动结束补发进度奖励
        ActivityDecoratingService.sendTreeRewardMail(pr, tree);
    }

    @Override
    public void afterLogin(Player pr) {

        //        //刷新任务
        //        refreshTask(pr);
        //        tasks.afterLogin(pr);
        //刷新商店
        refreshExchange();
        afterReload(pr);

        autoBattle.clearAutoBattle();
    }

    @Override
    public void afterReload(Player pr) {
        //  tasks.getTasks().values().forEach(t -> t.afterReload(pr));
        taskNPCs.values().forEach(n -> n.afterReload(pr));
    }

    private void initTree() {
        ActivityAnnivesaryConfig config = ActivityService
                .gainActiveConfig(ActivityAnnivesaryConfig.class, super.getActivityId());
        tree = new ChristmasTree(config.decorate, getDiffLevels());
    }

    private void initAutoBattle() {
        autoBattle = new AutoBattle(getDiffLevels());
    }

    /**
     * 初始化NPC
     *
     * @param [pr]
     * @return void
     * @Author: shenpeng
     * @Date: 2020-03-31
     */
    public void initTaskNPCs(Player pr) {
        //随机生成初始的NPC
        ActivityConfig config = KOSDataConfigService.getSettingById(ActivityConfig.class,
                getActivityId());
        ActivityAnnivesaryConfig anniversaryConfig = KOSDataConfigService
                .getSettingById(ActivityAnnivesaryConfig.class, config.activeId);
        addNPCs(pr, anniversaryConfig.initHTask);
    }

    /**
     * 每日重置时刷新NPC
     *
     * @param [pr]
     * @return void
     * @Author: shenpeng
     * @Date: 2020-04-10
     */
    public void dailyRefreshNPCs(Player pr) {
        ActivityConfig config = KOSDataConfigService.getSettingById(ActivityConfig.class,
                getActivityId());
        ActivityAnnivesaryConfig anniversaryConfig = KOSDataConfigService
                .getSettingById(ActivityAnnivesaryConfig.class, config.activeId);
        diffSetNPCTimes(0);
        if (taskNPCs.size() < anniversaryConfig.initHTask) {
            int refreshTime = Math.min(anniversaryConfig.initHTask - taskNPCs.size(),
                    anniversaryConfig.dailyTaskNum);
            addNPCs(pr, refreshTime);
            Diff.addDiff(this.npcTimes, refreshTime, getDiffLevels(), "npcTimes");
            this.npcTimes = refreshTime;
        }
    }

    /**
     * 刷新npcTimes个npc
     *
     * @param [pr, npcTimes]
     * @return void
     * @Author: shenpeng
     * @Date: 2020-04-10
     */
    private void addNPCs(Player pr, int npcTimes) {
        ActivityConfig config = KOSDataConfigService.getSettingById(ActivityConfig.class,
                getActivityId());
        ActivityAnnivesaryConfig anniversaryConfig = KOSDataConfigService
                .getSettingById(ActivityAnnivesaryConfig.class, config.activeId);
        List<String> exceptIds = new ArrayList<>(finNPCs);
        exceptIds.addAll(taskNPCs.keySet());
        List<String> initNPCs = ActiYearService.randomNPCIds(anniversaryConfig, npcTimes,
                new ArrayList<>());
        for (String npcId : initNPCs) {
            TaskNPC taskNPC = new TaskNPC(ArrayUtils.addAll(getDiffLevels(), "taskNPCs", npcId),
                    npcId);
            Diff.mapPut(taskNPCs, npcId, taskNPC, getDiffLevels(), "taskNPCs");
            taskNPCs.put(npcId, taskNPC);
        }
    }

    /**
     * 刷新兑换商店
     *
     * @param []
     * @return void
     * @Author: shenpeng
     * @Date: 2020-03-03
     */
    private void refreshExchange() {
        ActivityAnnivesaryConfig config = ActivityService
                .gainActiveConfig(ActivityAnnivesaryConfig.class, getActivityId());
        ActivityService.refreshExchange(exchanges, config.exchangeId, this, getDiffLevels());
    }

    /**
     * 判断是否可以挑战blockId关卡：前面的关卡已通关，宝箱也都领取
     *
     * @param mapId
     * @param blockId
     */
    public boolean canStartBattle(String mapId, String blockId) {
        ActivityCommonMap map = KOSDataConfigService.getSettingById(ActivityCommonMap.class, mapId);
        List<String> frontMaps = map.frontMap;

        // mapId的前置map关卡都已通关，也领取了宝箱奖励
        for (String frontMap : frontMaps) {
            ActivityCommonMap frontMapConfig = KOSDataConfigService
                    .getSettingById(ActivityCommonMap.class, frontMap);
            if (!mapHasFinished(frontMap, frontMapConfig.subpoint.size())) {
                return false;
            }
        }

        //mapId当前map关卡：在blockId之前的block都通关了。
        if (!mapHasFinished(mapId, map.subpoint.indexOf(blockId))) {
            return false;
        }
        return true;
    }

    /**
     * 判断map的关卡[0，end)是否都已通关，并已领取宝箱奖励
     *
     * @param mapId
     * @return
     */
    private boolean mapHasFinished(String mapId, int end) {
        ActivityCommonMap map = KOSDataConfigService.getSettingById(ActivityCommonMap.class, mapId);
        List<String> subpoint = map.subpoint;
        // 是第一个关卡
        if (end == 0) {
            return true;
        }
        if (end < 0) {
            return false;
        }

        end = Math.min(end, subpoint.size());

        for (int i = 0; i < end; i++) {
            if (!blockHasFinished(subpoint.get(i), map)) {
                return false;
            }
        }
        return true;

    }

    /**
     * blockId关卡是否已通过，并已领取宝箱奖励
     *
     * @param map
     * @param blockId
     * @return
     */
    private boolean blockHasFinished(String blockId, ActivityCommonMap map) {
        if (!map.subpoint.contains(blockId)) {
            return false;
        }
        // 关卡没有通过
        if (!hasFinishedBlock(map.Id, blockId)) {
            return false;
        }
        // 关卡的宝箱没有领取
        if (map.boxReward.getJSONObject(blockId) != null
                && !hasGatheredBoxReward(map.Id, blockId)) {
            return false;
        }

        return true;
    }

    public boolean hasFinishedBlock(String mapId, String blockId) {
        return finishedBlocks.getOrDefault(mapId, Lists.newArrayList()).contains(blockId);
    }

    public boolean hasGatheredBoxReward(String mapId, String blockId) {
        return finishedBlocks.getOrDefault(mapId, Lists.newArrayList()).contains(blockId);
    }

    public void diffAddFinishedBlocks(String mapId, String blockId) {
        List<String> blockIds = finishedBlocks.getOrDefault(mapId, Lists.newArrayList());
        blockIds.add(blockId);
        Diff.mapPut(finishedBlocks, mapId, blockIds, getDiffLevels(), "finishedBlocks");
        finishedBlocks.put(mapId, blockIds);
    }

    public void diffAddGatheredReward(String mapId, String blockId) {
        List<String> rewardIds = gatheredRewards.getOrDefault(mapId, Lists.newArrayList());
        rewardIds.add(blockId);
        Diff.mapPut(gatheredRewards, mapId, rewardIds, getDiffLevels(), "gatheredRewards");
        gatheredRewards.put(mapId, rewardIds);
    }

    /**
     * 刷新副本的战力。
     *
     * @param pr
     */
    private void updateBlockCombats(Player pr) {
        int curDay = getCurrentDayByStart(pr);
        ActivityAnnivesaryConfig yearConfig = ActivityService
                .gainActiveConfig(ActivityAnnivesaryConfig.class, getActivityId());
        int expireDay = (int) ((getFinishTime() - getStartTime())
                / KOSTimeUtils.ONE_DAY_MILLSECONDS);
        String curDayStr = String.valueOf(curDay);
        if (!blockCombats.containsKey(curDayStr)) {
            String redisKey = String.format(RedisKeyConst.ACTIVITY_YEAR_BLOCK_COMBAT, curDayStr);
            int combat = ActivityService.calCombat(redisKey, yearConfig.mapCombatGet, expireDay,
                    LbType.ACTIVE_COMBAT);
            Diff.mapPut(blockCombats, curDayStr, combat, getDiffLevels(), "blockCombats");
            blockCombats.putIfAbsent(curDayStr, combat);
        }
    }

    public int getCurrentDayByStart(Player pr) {
        ActivityConfig config = KOSDataConfigService.getSettingById(ActivityConfig.class,
                getActivityId());
        return ActivityTimeManager.INSTANCE.getCurrentDayByStart(config, pr, getStartTime()) + 1;
    }

    /**
     * 扣除血量
     *
     * @param [hurt]
     * @return boolean
     * @Author: shenpeng
     * @Date: 2020-04-30
     */
    public boolean decrBossHp(long hurt) {
        long curHp = bossHp.get(curBossId) - hurt;
        curHp = Math.max(curHp, 0);

        if (curHp <= 0) {
            switchToNextBoss();
            return true;
        } else {
            return false;
        }
    }

    /**
     * 切换到下一个boss
     *
     * @param []
     * @return void
     * @Author: shenpeng
     * @Date: 2020-04-30
     */
    public void switchToNextBoss() {
        ActivityAnnivesaryConfig annivesaryConfig = YearManager.INSTANCE.getConfig();
        int index = annivesaryConfig.bossBlock.indexOf(curBossId);
        index++;
        if (index < annivesaryConfig.bossBlock.size()) {
            diffSetCurBossId(annivesaryConfig.bossBlock.get(index));
        }

    }

    public Map<String, ExchangeComponent> getExchanges() {
        return exchanges;
    }

    public void setExchanges(Map<String, ExchangeComponent> exchanges) {
        this.exchanges = exchanges;
    }

    public Map<String, Integer> getBlockCombats() {
        return blockCombats;
    }

    public void setBlockCombats(Map<String, Integer> blockCombats) {
        this.blockCombats = blockCombats;
    }

    public void diffSetCurBossId(String bossId) {
        Diff.addDiff(this.curBossId, bossId, getDiffLevels(), "curBossId");
        this.curBossId = bossId;
    }

    public void diffSetBossHp(String bossId, long hp) {
        Diff.mapPut(bossHp, bossId, hp, getDiffLevels(), "bossHp");
        bossHp.put(bossId, hp);
    }

    public Map<String, Long> getBossHp() {
        return bossHp;
    }

    public void setBossHp(Map<String, Long> bossHp) {
        this.bossHp = bossHp;
    }

    public ChristmasTree getTree() {
        return tree;
    }

    public void setTree(ChristmasTree tree) {
        this.tree = tree;
    }

    public void diffSetNPCTimes(int npcTimes) {
        Diff.addDiff(this.npcTimes, npcTimes, getDiffLevels(), "npcTimes");
        this.npcTimes = npcTimes;
    }

    public Map<String, TaskNPC> getTaskNPCs() {
        return taskNPCs;
    }

    public void setTaskNPCs(Map<String, TaskNPC> taskNPCs) {
        this.taskNPCs = taskNPCs;
    }

    public List<String> getFinNPCs() {
        return finNPCs;
    }

    public void setFinNPCs(List<String> finNPCs) {
        this.finNPCs = finNPCs;
    }

    public int getNpcTimes() {
        return npcTimes;
    }

    public void setNpcTimes(int npcTimes) {
        this.npcTimes = npcTimes;
    }

    public void diffAddBuff(String buffId) {
        Diff.listAdd(buffs, buffId, getDiffLevels(), "buffs");
        buffs.add(buffId);
    }

    public List<String> getBuffs() {
        return buffs;
    }

    public void setBuffs(List<String> buffs) {
        this.buffs = buffs;
    }

    public Map<String, List<String>> getFinishedBlocks() {
        return finishedBlocks;
    }

    public void setFinishedBlocks(Map<String, List<String>> finishedBlocks) {
        this.finishedBlocks = finishedBlocks;
    }

    public Map<String, List<String>> getGatheredRewards() {
        return gatheredRewards;
    }

    public void setGatheredRewards(Map<String, List<String>> gatheredRewards) {
        this.gatheredRewards = gatheredRewards;
    }

    public void incrChallengeBossTimes() {
        Diff.addDiff(this.bossTimes, this.bossTimes + 1, getDiffLevels(), "bossTimes");
        setBossTimes(this.bossTimes + 1);
    }

    public void diffSetBossTimes(int bossTimes) {
        Diff.addDiff(this.bossTimes, bossTimes, getDiffLevels(), "bossTimes");
        setBossTimes(bossTimes);
    }

    public JSONObject getEnemyInfo() {
        return enemyInfo;
    }

    public void setEnemyInfo(JSONObject enemyInfo) {
        this.enemyInfo = enemyInfo;
    }

    public AutoBattle getAutoBattle() {
        return autoBattle;
    }

    public void setAutoBattle(AutoBattle autoBattle) {
        this.autoBattle = autoBattle;
    }

    public int getBossTimes() {
        return bossTimes;
    }

    public void setBossTimes(int bossTimes) {
        this.bossTimes = bossTimes;
    }

    public String getCurBossId() {
        return curBossId;
    }

    public void setCurBossId(String curBossId) {
        this.curBossId = curBossId;
    }

    public void diffAddGatheredKillBossId(String bossId) {
        Diff.listAdd(this.gatheredKillBossId, bossId, getDiffLevels(), "gatheredKillBossId");
        this.gatheredKillBossId.add(bossId);
    }

    public List<String> getGatheredKillBossId() {
        return gatheredKillBossId;
    }

    public void setGatheredKillBossId(List<String> gatheredKillBossId) {
        this.gatheredKillBossId = gatheredKillBossId;
    }
}
